{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/logan/Projects/in-death-tournament/client/src/app/admin/users/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function ManageUsers() {\r\n    type User = {\r\n        _id: string;\r\n        username: string;\r\n        email: string;\r\n        roles: string[];\r\n    };\r\n\r\n    const [users, setUsers] = useState<User[]>([]);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(\"http://localhost:5000/api/users\", { withCredentials: true })\r\n            .then(res => setUsers(res.data))\r\n            .catch(() => setMessage(\"Failed to load users\"));\r\n    }, []);\r\n\r\n    const handleRoleToggle = async (userId: string, role: string) => {\r\n        const updatedUsers = users.map(user =>\r\n            user._id === userId\r\n                ? {\r\n                    ...user,\r\n                    roles: user.roles.includes(role)\r\n                        ? user.roles.filter(r => r !== role)\r\n                        : [...user.roles, role],\r\n                }\r\n                : user\r\n        );\r\n\r\n        setUsers(updatedUsers);\r\n\r\n        const updatedUser = updatedUsers.find(user => user._id === userId);\r\n        try {\r\n            await axios.put(\r\n                `http://localhost:5000/api/users/${userId}/roles`,\r\n                { roles: updatedUser?.roles || [] },\r\n                { withCredentials: true }\r\n            );\r\n            setMessage(\"Roles updated!\");\r\n        } catch {\r\n            setMessage(\"Failed to update roles\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-6 text-white\">\r\n            <h1 className=\"text-3xl mb-4\">Manage Users</h1>\r\n            {message && <p className=\"mb-4\">{message}</p>}\r\n\r\n            <table className=\"w-full bg-[#161b22] rounded border border-gray-600\">\r\n                <thead>\r\n                    <tr className=\"bg-gray-800 text-left\">\r\n                        <th className=\"p-2\">Username</th>\r\n                        <th className=\"p-2\">Email</th>\r\n                        <th className=\"p-2\">Roles</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => (\r\n                        <tr key={user._id} className=\"border-t border-gray-700\">\r\n                            <td className=\"p-2\">{user.username}</td>\r\n                            <td className=\"p-2\">{user.email}</td>\r\n                            <td className=\"p-2\">\r\n                                {[\"admin\", \"creator\", \"player\"].map(role => (\r\n                                    <label key={role} className=\"mr-4\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={user.roles.includes(role)}\r\n                                            onChange={() => handleRoleToggle(user._id, role)}\r\n                                            className=\"mr-1\"\r\n                                        />\r\n                                        {role}\r\n                                    </label>\r\n                                ))}\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IAQpB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC7C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,qIAAA,CAAA,UAAK,CACA,GAAG,CAAC,mCAAmC;YAAE,iBAAiB;QAAK,GAC/D,IAAI,CAAC,CAAA,MAAO,SAAS,IAAI,IAAI,GAC7B,KAAK,CAAC,IAAM,WAAW;IAChC,GAAG,EAAE;IAEL,MAAM,mBAAmB,OAAO,QAAgB;QAC5C,MAAM,eAAe,MAAM,GAAG,CAAC,CAAA,OAC3B,KAAK,GAAG,KAAK,SACP;gBACE,GAAG,IAAI;gBACP,OAAO,KAAK,KAAK,CAAC,QAAQ,CAAC,QACrB,KAAK,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,MAAM,QAC7B;uBAAI,KAAK,KAAK;oBAAE;iBAAK;YAC/B,IACE;QAGV,SAAS;QAET,MAAM,cAAc,aAAa,IAAI,CAAC,CAAA,OAAQ,KAAK,GAAG,KAAK;QAC3D,IAAI;YACA,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CACX,CAAC,gCAAgC,EAAE,OAAO,MAAM,CAAC,EACjD;gBAAE,OAAO,aAAa,SAAS,EAAE;YAAC,GAClC;gBAAE,iBAAiB;YAAK;YAE5B,WAAW;QACf,EAAE,OAAM;YACJ,WAAW;QACf;IACJ;IAEA,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;gBAAG,WAAU;0BAAgB;;;;;;YAC7B,yBAAW,8OAAC;gBAAE,WAAU;0BAAQ;;;;;;0BAEjC,8OAAC;gBAAM,WAAU;;kCACb,8OAAC;kCACG,cAAA,8OAAC;4BAAG,WAAU;;8CACV,8OAAC;oCAAG,WAAU;8CAAM;;;;;;8CACpB,8OAAC;oCAAG,WAAU;8CAAM;;;;;;8CACpB,8OAAC;oCAAG,WAAU;8CAAM;;;;;;;;;;;;;;;;;kCAG5B,8OAAC;kCACI,MAAM,GAAG,CAAC,CAAA,qBACP,8OAAC;gCAAkB,WAAU;;kDACzB,8OAAC;wCAAG,WAAU;kDAAO,KAAK,QAAQ;;;;;;kDAClC,8OAAC;wCAAG,WAAU;kDAAO,KAAK,KAAK;;;;;;kDAC/B,8OAAC;wCAAG,WAAU;kDACT;4CAAC;4CAAS;4CAAW;yCAAS,CAAC,GAAG,CAAC,CAAA,qBAChC,8OAAC;gDAAiB,WAAU;;kEACxB,8OAAC;wDACG,MAAK;wDACL,SAAS,KAAK,KAAK,CAAC,QAAQ,CAAC;wDAC7B,UAAU,IAAM,iBAAiB,KAAK,GAAG,EAAE;wDAC3C,WAAU;;;;;;oDAEb;;+CAPO;;;;;;;;;;;+BALf,KAAK,GAAG;;;;;;;;;;;;;;;;;;;;;;AAsBzC","debugId":null}}]
}